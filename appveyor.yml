# DO NOT CHANGE the "init" and "install" sections below

# Download script file from GitHub
init:
  ps: |
        $ErrorActionPreference = "Stop"
        Invoke-WebRequest http://raw.github.com/krlmlr/r-appveyor/master/scripts/appveyor-tool.ps1 -OutFile "..\appveyor-tool.ps1"
        Import-Module '..\appveyor-tool.ps1'

install:
  ps: Bootstrap

#cache:
#  - C:\RLibrary

# Adapt as necessary starting from here

for:
-
  skip_tags: true

before_build:
  - curl -fsSL -o checktag.sh https://github.com/StoXProject/repo/raw/master/scripts/checktag.sh
  - curl -fsSL -o deploy.sh https://github.com/StoXProject/repo/raw/master/scripts/deploy.sh
  - checktag.sh

build_script:
  - travis-tool.sh install_deps

test_script:
  - travis-tool.sh run_tests

before_deploy:
  # Prepare to deploy DRAT
  - travis-tool.sh install_r drat
  - travis-tool.sh install_r git2r
  - ps: new-item "drat" -itemtype directory
  - ps: $env:BINSRC = Get-ChildItem -Path . | Where-Object { $_.Extension -eq ".zip" }
  - ps: $env:PKG_REPO = Get-Location
  - ps: $env:PKG_REPO = [regex]::escape($env:PKG_REPO)
  - ps: copy $env:BINSRC .\drat
  # Do drat deploy whenever it is not a pull request and only for the master branch
  - ps: |
          if( !$env:APPVEYOR_PULL_REQUEST_NUMBER ) {
            if( $env:APPVEYOR_REPO_BRANCH  -eq "master" ) {
              .\deploy.sh
            }
          }
  # Prepare for release deploy
  - ps: |
          $env:R_NUMVER = &"Rscript.exe" -e "cat(as.character(getRversion()))"
          $env:PKGVER = Select-String -Path .\DESCRIPTION -Pattern '^Version: ' | % {$_.line -replace "^Version: "}
          $env:PKGNAME = Select-String -Path .\DESCRIPTION -Pattern '^Package: ' | % {$_.line -replace "^Package: "}
          Get-ChildItem -Path . | Where-Object { $_.Extension -eq ".zip" }  | % { rename-item –path $_.Fullname –Newname ($_.basename + '-R' + $env:R_NUMVER + $_.extension) }
          $env:BIN_PKG_FILE = Get-ChildItem -Path . | Where-Object { $_.Extension -eq ".zip" }
          Push-AppveyorArtifact $env:BIN_PKG_FILE
          Write-Host "Resulting binary: $env:BIN_PKG_FILE"

deploy:
  tag: '$(PKGNAME)-v$(PKGVER)'
  release: '$(PKGNAME)-v$(PKGVER)'
  description: ''
  provider: GitHub
  auth_token: $(API_KEY)
  artifact: $(BIN_PKG_FILE)
  draft: false
  prerelease: false
  force_update: true
  on:
    branch: master

on_failure:
  - 7z a failure.zip *.Rcheck\*
  - appveyor PushArtifact failure.zip

environment:
  NOT_CRAN: true
  USE_RTOOLS: true
  R_REMOTES_STANDALONE: true

  matrix:
  - R_VERSION: oldrel
  - R_VERSION: release

artifacts:
  - path: '*.Rcheck\**\*.log'
    name: Logs

  - path: '*.Rcheck\**\*.out'
    name: Logs

  - path: '*.Rcheck\**\*.fail'
    name: Logs

  - path: '*.Rcheck\**\*.Rout'
    name: Logs

  - path: '\*_*.tar.gz'
    name: Bits

  - path: '\*_*.zip'
    name: Bits
