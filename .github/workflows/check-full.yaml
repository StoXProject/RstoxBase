on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      
name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: '4.3',     pkgext: '.tgz'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - name: Do autorelease increment, tagging, and environment setup
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          curl "https://raw.githubusercontent.com/StoXProject/testingRepo/main/scripts/checktag-actions.sh" --output testingRepo_checktag.sh
          curl "https://raw.githubusercontent.com/StoXProject/testingRepo/main/scripts/deploy-actions.sh" --output testingRepo_deploy.sh
          chmod +x ./testingRepo_checktag.sh ./testingRepo_deploy.sh
          . testingRepo_checktag.sh
          curl "https://raw.githubusercontent.com/StoXProject/repo/master/scripts/checktag-actions.sh" --output repo_checktag.sh
          curl "https://raw.githubusercontent.com/StoXProject/repo/master/scripts/deploy-actions.sh" --output repo_deploy.sh
          chmod +x ./repo_checktag.sh ./repo_deploy.sh
          . repo_checktag.sh
          echo "PRERELEASE=${PRERELEASE}" >> $GITHUB_ENV
          echo "FINAL_TAG=${FINAL_TAG}" >> $GITHUB_ENV
          echo "PKG_FILE_PREFIX=${PKG_FILE_PREFIX}" >> $GITHUB_ENV
          echo "PKG_FILE=${PKG_FILE_PREFIX}${{ matrix.config.pkgext }}" >> $GITHUB_ENV
          echo "PKG_FREL=${PKG_FILE_PREFIX}-R.${{ matrix.config.r }}-${{ runner.os }}${{ matrix.config.pkgext }}" >> $GITHUB_ENV
          echo "PKG_REPO=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
        shell: bash

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          #rtools-version: ${{ matrix.config.rtools }} # Not present in the matrix...
          #http-user-agent: ${{ matrix.config.http-user-agent }} # Not present in the matrix...

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Query R package dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), "depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ env.cache-version }}-${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ env.cache-version }}-${{ runner.os }}-r-${{ matrix.config.r }}-

      - name: Install system dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "18.04"))')

      - name: Install R package dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Install R package dependencies on Windows and macOS
        if: runner.os != 'Linux'
        run: |
          # Show the repos:
          getOption("repos")
          
          # Make sure Rcpp is >= 1.0.10 due to deprecation of sprintf in c++:
          install.packages("Rcpp")
          
          # Install the rest of the dependencies:
          options(install.packages.compile.from.source = "never") # Avoid installing sources which need compilation
          # dependencies = TRUE installs "Depends", "Imports", "LinkingTo" and "Suggests", and the  "Depends", "Imports" and "LinkingTo" recursively from those dependencies
          remotes::install_deps(dependencies = TRUE, type = "both")
        shell: Rscript {0}

      - name: Prepare for CRANdependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y libcurl4-openssl-dev
          sudo apt-get install -y libudunits2-dev
        shell: bash
      
      - name: Install CRANdependencies
        run: |
          remotes::install_cran("rcmdcheck")
          remotes::install_cran("git2r")
          remotes::install_cran("sessioninfo")
          #remotes::install_cran("drat")
          # Using the modfied drat that supports big sur:
          #remotes::install_github(repo = "stoxproject/drat", dependencies = FALSE)
          remotes::install_github(repo = 'eddelbuettel/drat', dependencies = FALSE)
        shell: Rscript {0}
        
      - name: Show .Platform$pkgType
        run: |
          .Platform$pkgType
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Build package source archive
        if: runner.os == 'Linux' && matrix.config.r == 'release' && github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          pkgbuild::build(".", dest_path = ".", binary = FALSE)
          system(paste0("PKG_FREL=", Sys.getenv("PKG_FILE"), " >> ", Sys.getenv("GITHUB_ENV")))
        shell: Rscript {0}

      - name: Build package binary archive
        if: (runner.os == 'Windows' || runner.os == 'macOS') && github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          pkgbuild::build(".", dest_path = ".", binary = TRUE)
          file.copy(Sys.getenv("PKG_FILE"), Sys.getenv("PKG_FREL"))
        shell: Rscript {0}

      # We include 'release' in order to always test the latest release, but (mac and Windows) binaries are not deployed to the drat repo:
      - name: Upload to DRAT repo
        if: ( (runner.os == 'Windows' && matrix.config.r != 'release') || (runner.os == 'macOS' && matrix.config.r != 'release') || (runner.os == 'Linux' && matrix.config.r == 'release') ) && github.event_name == 'push' && github.ref == 'refs/heads/master'
        env:
          BUILD_NUMBER: ${{ github.sha  }}
          DRAT_DEPLOY_TOKEN: ${{ secrets.DRAT_DEPLOY_TOKEN }}
        run: . repo_deploy.sh
        shell: bash

      # We include 'release' in order to always test the latest release, but (mac and Windows) binaries are not deployed to the drat repo:
      - name: Upload to DRAT testingRepo
        if: ( (runner.os == 'Windows' && matrix.config.r != 'release') || (runner.os == 'macOS' && matrix.config.r != 'release') || (runner.os == 'Linux' && matrix.config.r == 'release') ) && github.event_name == 'push' && github.ref == 'refs/heads/master'
        env:
          BUILD_NUMBER: ${{ github.sha  }}
          DRAT_DEPLOY_TOKEN: ${{ secrets.DRAT_DEPLOY_TOKEN }}
        run: . testingRepo_deploy.sh
        shell: bash

      - name: Create release and upload files
        if: ( (runner.os == 'Windows' && matrix.config.r != 'release') || (runner.os == 'macOS' && matrix.config.r != 'release') || (runner.os == 'Linux' && matrix.config.r == 'release') ) && github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          commit: master
          tag: ${{ env.FINAL_TAG }}
          name: ${{ env.FINAL_TAG }}
          artifacts: ${{ env.PKG_REPO }}/${{ env.PKG_FREL }}
          token: ${{ secrets.GITHUB_TOKEN }}
